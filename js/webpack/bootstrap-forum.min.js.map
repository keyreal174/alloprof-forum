{"version":3,"sources":["webpack://vanillaforum/./applications/dashboard/src/scripts/legacy/atwho.ts","webpack://vanillaforum/./applications/dashboard/src/scripts/legacy/index.ts","webpack://vanillaforum/./applications/dashboard/src/scripts/entries/bootstrap.ts","webpack://vanillaforum/./build/entries/public-path.ts"],"names":["rawMatch","atCache","atEmpty","minCharacters","Object","application","maxSuggestions","serverLimit","emojiData","emojis","emoji","emojiFormat","format","emojiAssetPath","assetPath","emojiList","entries","map","_a","_b","__read","index","emojiImageUrl","parts","split","name","filename","basename","ext","emojiTemplate","replace","matchAtMention","flag","subtext","shouldStartWithSpace","match","utility","matchFakeEmoji","RegExp","exec","initializeAtComplete","editorElement","iframe","iframeWindow","contentWindow","$","atwho","at","tpl","limit","callbacks","remote_filter","query","callback","length","shouldContinueFiltering","filterString","i","l","slice","isQueryEmpty","key","hasOwnProperty","getJSON","q","data","Array","isArray","forEach","result","before_insert","value","$li","username","requiresQuotation","test","hasQuotation","insert","this","highlighter","li","regexp","str","$1","$2","$3","$4","matcher","cWindow","insert_tpl","tplEval","on","event","offset","context","suggestionElement","view","$el","$inputor","lineHeight","parseInt","css","iframeOffset","leftCoordinate","left","topCoordinate","top","selectHeight","text","fontMirror","font","fontWidth","width","each","element","outerHeight","height","windowHeight","window","scrollPosition","scrollTop","newOffset","fn","gdn","atCompleteInit","apiv2","then","e","target","contentEvent","CustomEvent","bubbles","cancelable","document","dispatchEvent","catch","error","_dashboard_application__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","p"],"mappings":"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","file":"/js/webpack/bootstrap-forum.min.js?e6f9775a0ae7098228f6","sourcesContent":["/**\n * At-who setup for legacy @mentions.\n *\n * @copyright 2009-2018 Vanilla Forums Inc.\n * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0\n */\n\nimport { formatUrl, getMeta } from \"@dashboard/application\";\nimport { log, matchAtMention as _matchAtMention } from \"@dashboard/utility\";\n\n// Store cache results in an outer scoped variable., so all instances share the same data\n// and can build the cache together.\nconst atCache = {};\nconst atEmpty = {};\n\n// The current raw match. This is needed to properly match quoted strings.\nlet rawMatch: string | undefined;\n\n// Set minimum characters to type for @mentions to fire\nconst minCharacters = getMeta(\"mentionMinChars\", 2);\n\n// Max suggestions to show in dropdown.\nconst maxSuggestions = getMeta(\"mentionSuggestionCount\", 5);\n\n// Server response limit. This should match the limit set in\n// *UserController->TagSearch* and UserModel->TagSearch\nconst serverLimit = 30;\n\n// Emoji, set in definition list in foot, by Emoji class. Make sure\n// that class is getting instantiated, otherwise emoji will be empty.\n\ninterface IEmojiData {\n    assetPath?: string;\n    emoji?: {\n        [key: string]: string;\n    };\n    format?: string;\n}\n\nconst emojiData: IEmojiData = getMeta(\"emoji\", {});\nconst emojis = emojiData.emoji || {};\nconst emojiFormat = emojiData.format || \"\";\nconst emojiAssetPath = emojiData.assetPath || \"\";\n\nconst emojiList = Object.entries(emojis).map(([index, emojiImageUrl]) => {\n    const parts = emojiImageUrl.split(\".\");\n\n    return { name: index, filename: emojiImageUrl, basename: parts[0], ext: \".\" + parts[1] };\n});\n\nconst emojiContentTemplate = emojiFormat\n    .replace(/{(.+?)}/g, \"$${$1}\")\n    .replace(\"%1$s\", \"${src}\")\n    .replace(\"%2$s\", \"${name}\")\n    .replace(\"${src}\", emojiAssetPath + \"/${filename}\")\n    .replace(\"${dir}\", emojiAssetPath);\nconst emojiTemplate =\n    '<li data-value=\":${name}:\" class=\"at-suggest-emoji\"><span class=\"emoji-wrap\">' +\n    emojiContentTemplate +\n    '</span> <span class=\"emoji-name\">${name}</span></li>';\n\n/**\n * Match an @mention\n *\n * @param flag - The character sequence used to trigger this match (e.g. :).\n * @param subtext - The string to be tested.\n * @param shouldStartWithSpace - Should the pattern include a test for a whitespace prefix?\n * @returns Matching string if successful. Null on failure to match.\n */\nexport function matchAtMention(flag: string, subtext: string, shouldStartWithSpace: boolean): string | null {\n    const match = _matchAtMention(subtext, shouldStartWithSpace);\n    if (match) {\n        rawMatch = match.rawMatch;\n        return match.match;\n    }\n\n    return null;\n}\n\n/**\n * Custom matching for our emoji images. Eg. :) :/ >:(\n *\n * @param flag - The character sequence used to trigger this match (e.g. :).\n * @param subtext - The string to be tested.\n * @param shouldStartWithSpace - Should the pattern include a test for a whitespace prefix?\n * @returns Matching string if successful.  Null on failure to match.\n */\nexport function matchFakeEmoji(flag, subtext, shouldStartWithSpace) {\n    flag = flag.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n    if (shouldStartWithSpace) {\n        flag = \"(?:^|\\\\s)\" + flag;\n    }\n\n    // Some browsers append a linefeed to the end of subtext.  We need to allow for it.\n    const regexp = new RegExp(flag + \"([A-Za-z0-9_+-]*|[^\\\\x00-\\\\xff]*)(?:\\\\n)?$\", \"gi\");\n    const match = regexp.exec(subtext);\n\n    if (match) {\n        return match[2] || match[1];\n    } else {\n        return null;\n    }\n}\n\nexport function initializeAtComplete(editorElement, iframe?: any) {\n    // Handle iframe situation\n    const iframeWindow = iframe ? iframe.contentWindow : \"\";\n\n    const remoteDataHandler = (query, callback) => {\n        // Do this because of undefined when adding spaces to\n        // matcher callback, as it will be monitoring changes.\n        query = query || \"\";\n\n        // Only all query strings greater than min_characters\n        if (query.length >= minCharacters) {\n            // If the cache array contains less than LIMIT 30\n            // (according to server logic), then there's no\n            // point sending another request to server, as there\n            // won't be any more results, as this is the maximum.\n            let shouldContinueFiltering = true;\n\n            // Remove last character so that the string can be\n            // found in the cache, if exists, then check if its\n            // matching array has less than the server limit of\n            // matches, which means there are no more, so save the\n            // additional server request from being sent.\n            let filterString = \"\";\n\n            // Loop through string and find first closest match in\n            // the cache, and if a match, check if more filtering\n            // is required.\n            for (let i = 0, l = query.length; i < l; i++) {\n                filterString = query.slice(0, -i);\n\n                if (atCache[filterString] && atCache[filterString].length < serverLimit) {\n                    // Add this other query to empty array, so that it\n                    // will not fire off another request.\n                    atEmpty[query] = query;\n\n                    // Do not filter more, meaning, do not send\n                    // another server request, as all the necessary\n                    // data is already in memory.\n                    shouldContinueFiltering = false;\n                    break;\n                }\n            }\n\n            // Check if query would be empty, based on previously\n            // cached empty results. Compare against the start of\n            // the latest query string.\n            let isQueryEmpty = false;\n\n            // Loop through cache of empty query strings.\n            for (const key in atEmpty) {\n                if (atEmpty.hasOwnProperty(key)) {\n                    // See if cached empty results match the start\n                    // of the latest query. If so, then no point\n                    // sending new request, as it will return empty.\n                    if (query.match(new RegExp(\"^\" + key + \"+\")) !== null) {\n                        isQueryEmpty = true;\n                        break;\n                    }\n                }\n            }\n\n            const filterSuccessHandler = data => {\n                if (Array.isArray(data)) {\n                    data.forEach(result => {\n                        if (typeof result === \"object\" && typeof result.name === \"string\") {\n                            // Convert special characters to safely insert into template.\n                            result.name = result.name\n                                .replace(/&/g, \"&amp;\")\n                                .replace(/</g, \"&lt;\")\n                                .replace(/>/g, \"&gt;\")\n                                .replace(/\"/g, \"&quot;\")\n                                .replace(/'/g, \"&apos;\");\n                        }\n                    });\n                }\n\n                callback(data);\n\n                // If data is empty, cache the results to prevent\n                // other requests against similarly-started\n                // query strings.\n                if (data.length) {\n                    atCache[query] = data;\n                } else {\n                    atEmpty[query] = query;\n                }\n            };\n\n            // Produce the suggestions based on data either\n            // cached or retrieved.\n            if (shouldContinueFiltering && !isQueryEmpty && !atCache[query]) {\n                $.getJSON(\n                    formatUrl(\"/user/tagsearch\"),\n                    {\n                        q: query,\n                        limit: serverLimit,\n                    },\n                    filterSuccessHandler,\n                );\n            } else {\n                // If no point filtering more as the parent filter\n                // has not been maxed out with responses, use the\n                // closest parent filter instead of the latest\n                // query string.\n                if (!shouldContinueFiltering) {\n                    callback(atCache[filterString]);\n                } else {\n                    callback(atCache[query]);\n                }\n            }\n        }\n    };\n\n    /**\n     * Pre-insert handler for atwho.\n     *\n     * Note, in contenteditable mode (iframe for us), the value is surrounded by span tags.\n     */\n    function beforeInsertHandler(value: string, $li: JQuery<any>): string {\n        // It's better to use the value provided, as it may have\n        // html tags around it, depending on mode. Using the\n        // regular expression avoids the need to check what mode\n        // the suggestion is made in, and then constructing\n        // it based on that. Optional assignment for undefined\n        // matcher callback results.\n        let username = $li.data(\"value\") || \"\";\n        // Pop off the flag--usually @ or :\n        username = username.slice(1, username.length);\n\n        // Check if there are any whitespaces, and if so, add\n        // quotation marks around the whole name.\n        const requiresQuotation = /[^\\w-]/.test(username);\n\n        // Check if there are already quotation marks around\n        // the string--double or single.\n        const hasQuotation = /([\"'])(.+)([\"'])/g.test(username);\n\n        let insert = username;\n        if (requiresQuotation && !hasQuotation) {\n            // Do not even need to have value wrapped in\n            // any tags at all. It will be done automatically.\n            // insert = value.replace(/(.*\\>?)@([\\w\\d\\s\\-\\+\\_]+)(\\<?.*)/, '$1@\"$2\"$3');\n            insert = '\"' + username + '\"';\n        }\n\n        // This is needed for checking quotation mark directly\n        // after at character, and preventing another at character\n        // from being inserted into the page.\n        const rawAtMatch = rawMatch || \"\";\n\n        const atQuote = /.?@([\"'])/.test(rawAtMatch);\n\n        // If atQuote is false, then insert the at character,\n        // otherwise it means the user typed a quotation mark\n        // directly after the at character, which, would get\n        // inserted again if not checked. atQuote would\n        // be false most of the time; the exception is when\n        // it's true.\n        if (!atQuote) {\n            insert = this.at + insert;\n        }\n\n        // The last character prevents the matcher from trigger on nearly everything.\n        return insert;\n    }\n\n    /**\n     * Custom highlighting to accept spaces in names.\n     * This is almost a copy of the default in the library, with tweaks in the regex.\n     */\n    function highlightHandler(li: string, query: string): string {\n        if (!query) {\n            return li;\n        }\n        const regexp = new RegExp(\">\\\\s*(\\\\w*)(\" + query.replace(\"+\", \"\\\\+\") + \")(\\\\w*)\\\\s*(\\\\s+.+)?<\", \"ig\");\n        // Capture group 4 for possible spaces\n        return li.replace(regexp, (str, $1, $2, $3, $4) => {\n            // Weird Chrome behaviour, so check for undefined, then\n            // set to empty string if so.\n            if (typeof $3 === \"undefined\") {\n                $3 = \"\";\n            }\n            if (typeof $4 === \"undefined\") {\n                $4 = \"\";\n            }\n\n            return \"> \" + $1 + \"<strong>\" + $2 + \"</strong>\" + $3 + $4 + \" <\";\n        });\n    }\n\n    $(editorElement)\n        .atwho({\n            at: \"@\",\n            tpl: '<li data-value=\"@${name}\" data-id=\"${id}\">${name}</li>',\n            limit: maxSuggestions,\n            callbacks: {\n                remote_filter: remoteDataHandler,\n                before_insert: beforeInsertHandler,\n                highlighter: highlightHandler,\n                matcher: matchAtMention,\n            },\n            cWindow: iframeWindow,\n        })\n        .atwho({\n            at: \":\",\n            tpl: emojiTemplate,\n            insert_tpl: \"${atwho-data-value}\",\n            callbacks: {\n                matcher: matchFakeEmoji,\n                tplEval: (tpl, map) => log(map),\n            },\n            limit: maxSuggestions,\n            data: emojiList,\n            cWindow: iframeWindow,\n        });\n\n    /**\n     * This hook is triggered when atWho places a selection list in the window.\n     * The context is passed implicitly when triggered by at.js.\n     *\n     * @param event - A custom event triggered by the advanced editor iframe/wysiwyg.\n     * @param offset - The pixel offsets inside of the iframe.\n     * @param context - Context from the contenteditable inside of the iframe.\n     */\n    function iframeAtWhoRepositionHandler(event: any, offset: any, context: any) {\n        // Actual suggestion box that will appear.\n        const suggestionElement = context.view.$el;\n\n        // The area where text will be typed (contenteditable body).\n        const $inputor = context.$inputor;\n\n        // Display it below the text.\n        const lineHeight = parseInt($inputor.css(\"line-height\"), 10);\n\n        // offset contains the top left values of the offset to the iframe\n        // we need to convert that to main window coordinates\n        const iframeOffset = $(iframe).offset();\n        let leftCoordinate = (iframeOffset ? iframeOffset.left : 0) + offset.left;\n        let topCoordinate = iframeOffset ? iframeOffset.top : 0;\n        let selectHeight = 0;\n\n        // In wysiwyg mode, the suggestbox follows the typing, which\n        // does not happen in regular mode, so adjust it.\n        // Either @ or : for now.\n        const at = context.at;\n        const { text } = context.query;\n        const fontMirror = $(\".BodyBox,.js-bodybox\");\n        const font = fontMirror.css(\"font-size\") + \" \" + fontMirror.css(\"font-family\");\n\n        // Get font width\n        const fontWidth = (at + text).width(font) - 2;\n\n        if (at === \"@\") {\n            leftCoordinate -= fontWidth;\n        }\n\n        if (at === \":\") {\n            leftCoordinate -= 2;\n        }\n\n        // atWho adds 3 select areas, presumably for differnet positing on screen (above below etc)\n        // This finds the active one and gets the container height\n        $(suggestionElement).each((index, element) => {\n            const outerHeight = $(element).outerHeight();\n            const height = $(element).height();\n\n            if (outerHeight && height && outerHeight > 0) {\n                selectHeight += height + lineHeight;\n            }\n        });\n\n        // Now should we show the selection box above or below?\n        const windowHeight = $(window).height() || 0;\n        const scrollPosition = $(window).scrollTop() || 0;\n        const selectionPosition = topCoordinate + offset.top - ($(window).scrollTop() || 0);\n        const iAvailableSpace = windowHeight - (selectionPosition - scrollPosition);\n\n        if (iAvailableSpace >= selectHeight) {\n            // Enough space below\n            topCoordinate = topCoordinate + offset.top + selectHeight - scrollPosition;\n        } else {\n            // Place it above instead\n            // @todo should check if this is more space than below\n            topCoordinate = topCoordinate + offset.top - scrollPosition;\n        }\n\n        // Move the select box\n        const newOffset = {\n            left: leftCoordinate,\n            top: topCoordinate,\n        };\n        $(suggestionElement).offset(newOffset);\n    }\n\n    // Only necessary for iframe.\n    // Based on work here: https://github.com/ichord/At.js/issues/124\n    if (iframeWindow) {\n        $(iframeWindow).on(\"reposition.atwho\", iframeAtWhoRepositionHandler);\n    }\n}\n","/**\n * Entrypoint for gradually replacing global.js\n *\n * At some point everything in this folder should be able to be removed (new base theme).\n *\n * @copyright 2009-2018 Vanilla Forums Inc.\n * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0\n */\n\nimport { onContent, onReady } from \"@dashboard/application\";\nimport { initializeAtComplete } from \"@dashboard/legacy/atwho\";\n\n// Initialize legacy @mentions for all BodyBox elements.\nif ($.fn.atwho) {\n    onReady(() => initializeAtComplete(\".BodyBox,.js-bodybox\"));\n    onContent(() => initializeAtComplete(\".BodyBox,.js-bodybox\"));\n\n    // Also assign this function to the global `gdn` object.\n    // The advanced editor calls this function directly when in wysiwyg format, as it needs to\n    // handle an iframe, and the editor instance needs to be referenced. The advanced editor does not yet use\n    // this build process so it can only communicate through here with a global.\n    window.gdn.atCompleteInit = initializeAtComplete;\n}\n","/**\n * Primary bootstrapping of the frontend JS. This entrypoint should be the last once executed.\n *\n * @copyright 2009-2018 Vanilla Forums Inc.\n * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0\n */\n\nimport { onContent, getMeta, _executeReady, _mountComponents } from \"@dashboard/application\";\nimport { log, logError, debug } from \"@dashboard/utility\";\nimport gdn from \"@dashboard/gdn\";\nimport apiv2 from \"@dashboard/apiv2\";\n\n// Right now this is imported here instead of being its own bundle.\n// Once we have some part of vanilla that can function without the legacy js,\n// this should be pulled out into its own javascript bundle.\nimport \"../legacy\";\n\n// Inject the debug flag into the utility.\ndebug(getMeta(\"debug\", false));\n\n// Export the API to the global object.\ngdn.apiv2 = apiv2;\n\nlog(\"Bootstrapping\");\n_executeReady()\n    .then(() => {\n        log(\"Bootstrapping complete.\");\n        // Mount all data-react components.\n        onContent(e => {\n            _mountComponents(e.target);\n        });\n\n        const contentEvent = new CustomEvent(\"X-DOMContentReady\", { bubbles: true, cancelable: false });\n        document.dispatchEvent(contentEvent);\n    })\n    .catch(error => {\n        logError(error);\n    });\n","/**\n * Set wepback's public path.\n * Otherwise the lookups of dynamically imported webpack files can fail on sites that have a different webroot\n * Eg. installed in a subfolder / using Reverse Proxy.\n *\n * @author Adam Charron <adam.c@vanillaforums.com>\n * @copyright 2009-2018 Vanilla Forums Inc.\n * @license http://www.opensource.org/licenses/gpl-2.0.php GNU GPL v2\n */\n\nimport { assetUrl } from \"@dashboard/application\";\n\n/**\n * This needs to be a free variable.\n *\n * Webpack does some magic to make this work.\n * It you try and set a local or global version of it, it WILL NOT work.\n *\n * @see https://stackoverflow.com/questions/12934929/what-are-free-variables\n * @see https://webpack.js.org/configuration/output/#output-publicpath\n * @see https://github.com/webpack/webpack/issues/2776#issuecomment-233208623\n */\n// @ts-ignore: Cannot find variable warning. See comment aboe.\n__webpack_public_path__ = assetUrl(\"/\");\n"],"sourceRoot":""}