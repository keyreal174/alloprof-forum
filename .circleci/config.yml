version: 2.1
orbs:
    vanilla:
        commands:
            checkout:
                steps:
                - run:
                    name: Check target branch
                    command: |
                        PR_NUMBER=${CI_PULL_REQUEST//*pull\//}

                        if [ -z "$PR_NUMBER" ]; then
                            echo "Not a pull request. Skipping this step."
                            exit
                        fi

                        if [[ -n ${PR_NUMBER} ]]
                        then
                            sudo apt-get install jq
                            url="https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER?access_token=$GITHUB_TOKEN"
                            target_branch=$(
                                curl "$url" | jq '.base.ref' | tr -d '"'
                            )
                            echo "Found target branch $target_branch".
                            echo "CUSTOM_TARGET_BRANCH='$target_branch'" >> $BASH_ENV
                        fi
                - run:
                    name: Checkout
                    command: |
                        # !/bin/bash
                        # Script for checking out our git repo.
                        # Fixes a few shortcomings of the built in `checkout script`.
                        #
                        # - Merges the target branch into our branch if possible.
                        #   this ensures that all tests pass with the latest upstream changes.
                        #   https://ideas.circleci.com/ideas/CCI-I-431
                        # - Get's rid of the `git reset --hard` to preserve default branch history.
                        #   https://discuss.circleci.com/t/git-checkout-of-a-branch-destroys-local-reference-to-master/23781
                        #   https://discuss.circleci.com/t/the-checkout-step-mangles-branches-messes-the-history/24975
                        set -e

                        # Add githubs known SSH key.
                        mkdir -p ~/.ssh

                        echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts

                        (umask 077; touch ~/.ssh/id_rsa)
                        chmod 0600 ~/.ssh/id_rsa
                        (cat \<<EOF > ~/.ssh/id_rsa
                        $CHECKOUT_KEY
                        EOF
                        )

                        # use git+ssh instead of https
                        git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true
                        git config --global gc.auto 0 || true


                        # Clone the repo.
                        if [ -e $TARGET_DIR/.git ]
                        then
                            cd $TARGET_DIR
                            git remote set-url origin "$CIRCLE_REPOSITORY_URL" || true
                        else
                            mkdir -p $TARGET_DIR
                            cd $TARGET_DIR
                            git clone "$CIRCLE_REPOSITORY_URL" .
                        fi

                        # Fetch the branch we need.
                        if [ -n "$CIRCLE_TAG" ]
                        then
                            git fetch --force origin "refs/tags/${CIRCLE_TAG}"
                        else
                            git fetch --force origin "${CIRCLE_BRANCH}:remotes/origin/${CIRCLE_BRANCH}"
                        fi

                        if [ -n "$CIRCLE_TAG" ]
                        then
                            git checkout -q "$CIRCLE_TAG"
                        elif [ -n "$CIRCLE_BRANCH" ]
                        then
                            git checkout -q "$CIRCLE_BRANCH"
                        fi
                        # Ensures the remote and local branch are in sync after the fetch (see above).
                        git reset --hard "$CIRCLE_SHA1"
                - run:
                    name: Merge master
                    command: |
                        set -eu -o pipefail
                        cd $TARGET_DIR
                        # Merge target branch back into ourselves if we need to.
                        err=0
                        if [ -n "$CUSTOM_TARGET_BRANCH" ]
                        then
                            (set -x && git merge $CUSTOM_TARGET_BRANCH) || err=$?
                        fi

                        if [ "$err" -ne "0" ]
                        then
                            echo -e "\033[0;31mERROR: Failed to merge your branch with target branch $CUSTOM_TARGET_BRANCH."
                            echo -e "Please manually merge master into your branch, and push the changes to GitHub.\033[0m"
                        fi
                        exit $err
aliases:
    - &db_env
        MYSQL_USER: circleci
        MYSQL_PASSWORD: ''
        MYSQL_DATABASE: vanilla_test
        MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
    - &php71
        - image: circleci/php:7.1.30-fpm-stretch-node
        - image: mysql:5.7.26
          environment: *db_env
    - &php72
        - image: circleci/php:7.2.19-fpm-stretch-node
        - image: mysql:5.7.26
          environment: *db_env
    - &php73
        - image: circleci/php:7.3.6-fpm-stretch-node
        - image: mysql:5.7.26
          environment: *db_env
    - &is_php
        run:
            name: Configuring as Frontend
            command: |
                mkdir $HOME/workspace
                echo 'TARGET_DIR="$HOME/workspace/php"' >> $BASH_ENV
    - &is_frontend
        run:
            name: Configuring as Frontend
            command: |
                mkdir $HOME/workspace
                echo 'TARGET_DIR="$HOME/workspace/frontend"' >> $BASH_ENV
    - &post_checkout_frontend
        run:
            name: Merge Target Branch
            command: |
                cd ~/workspace/frontend && ~/workspace/frontend/.circleci/scripts/merge-master.sh
    - &install_nginx
        run:
            name: Installing NGINX
            command: sudo apt-get update && sudo apt-get install nginx
    - &node
        - image: circleci/node:lts-browsers
    - &run_yarn
        run:
            name: Install Yarn Packages
            command: |
                cd ~/workspace/frontend
                yarn install --pure-lockfile
                yarn install-all
    - &set_hosts
        run:
            name: Configuring Hosts
            command: |
                # Localhost redirects
                echo 127.0.0.1 vanilla.test | sudo tee -a /etc/hosts
                cat /etc/hosts
    - &attach_workspace
        attach_workspace:
            at: ~/workspace
    - &run_composer
        run:
            name: Install Composer Packages
            command: |
                cd ~/workspace/php
                VANILLA_BUILD_DISABLE_AUTO_BUILD=true composer install --optimize-autoloader
    - &run_php_lint
        run:
            name: Linting PHP
            command: |
                cd ~/workspace/php
                # Validate syntax in all the files
                .circleci/scripts/php-lint.sh ./applications
                .circleci/scripts/php-lint.sh ./conf
                .circleci/scripts/php-lint.sh ./library
                .circleci/scripts/php-lint.sh ./plugins
                .circleci/scripts/php-lint.sh ./themes

                # Run code sniffer on the diffed files.
                ./.circleci/scripts/diff-standards.sh $CUSTOM_TARGET_BRANCH
    - &prepare_mysql
        run:
            name: Prepare Database Dependencies
            command: |
                sudo apt-get update && sudo apt-get install -y libfreetype6-dev libjpeg62-turbo-dev libpng-dev
                sudo docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/
                sudo docker-php-ext-install pdo pdo_mysql gd
                sudo apt-get install mysql-client
                # Create the SQL "circleci" user. Once we remove travis this should no longer be necessary.
                mysql -h 127.0.0.1 -u root -e \
                    "CREATE USER 'circleci'@'127.0.0.1'; GRANT ALL PRIVILEGES ON vanilla_test.* TO 'circleci'@'127.0.0.1' IDENTIFIED BY '';"
    - &await_mysql
        run:
            name: Waiting for MySQL to be ready
            command: |
                for i in `seq 1 30`;
                do
                nc -z 127.0.0.1 3306 && echo Success && exit 0
                echo -n .
                sleep 1
                done
                echo Failed waiting for MySQL && exit 1
jobs:
    frontend_setup:
        docker: *node
        steps:
            - run:
                name: Versions
                command: |
                    node --version
                    yarn --version
            - *is_frontend
            - vanilla/checkout
            - run:
                # Makes workspace persisting much faster if not needed.
                name: Cleaning up git directory
                command: |
                    cd ~/workspace/frontend
                    rm -rf .git
            # We explcitly don't cache dependencies.
            # The cache validation & fetching seems to take longer than fetching from source.
            - *run_yarn
            - persist_to_workspace:
                root: ~/workspace
                paths:
                    - frontend
    frontend_build:
        docker: *node
        steps:
            - *attach_workspace
            - run:
                name: Build Frontend
                command: |
                    cd ~/workspace/frontend
                    yarn build
    frontend_test:
        docker: *node
        steps:
            - *attach_workspace
            - run:
                name: Build Frontend
                command: |
                    cd ~/workspace/frontend
                    yarn test
    frontend_lint:
        docker: *node
        steps:
            - *attach_workspace
            - run: |
                cd ~/workspace/frontend
                yarn lint
                yarn prettier --check "**/src/scripts/**/*"
    frontend_typechecker:
        docker: *node
        resource_class: large
        steps:
            - *attach_workspace
            - run: |
                cd ~/workspace/frontend
                yarn check-types
    php_setup:
        docker: *php72
        steps:
            - run:
                name: Versions
                command: |
                    php --version
                    composer --version
            - *is_php
            - vanilla/checkout
            # We explcitly don't cache dependencies.
            # The cache validation & fetching seems to take longer than fetching from source.
            - *run_composer
            - persist_to_workspace:
                root: ~/workspace
                paths:
                    - php
    php_72_lint:
        docker: *php72
        steps: &php_lint_steps
            - *is_php
            - vanilla/checkout
            - *run_composer
            - *run_php_lint
    php_72_tests:
        docker: *php72
        steps: &php_unit_test_steps
            - *attach_workspace
            - *set_hosts
            - run:
                name: Test setup
                command: |
                    cd ~/workspace/php
                    cp ./.circleci/scripts/templates/vanilla/conf/bootstrap.before.php ./conf/bootstrap.before.php
            - *prepare_mysql
            - *await_mysql
            - run:
                name: Library Tests
                command: |
                    cd ~/workspace/php
                    ./vendor/bin/phpunit -c phpunit.xml.dist --exclude-group=ignore --testsuite="Library"
            - run:
                name: APIv2 Tests
                command: |
                    cd ~/workspace/php
                    ./vendor/bin/phpunit -c phpunit.xml.dist --exclude-group=ignore --testsuite="APIv2"
    php_72_integration:
        docker: *php72
        steps: &php_integration_test_steps
            - *attach_workspace
            - *set_hosts
            - *install_nginx
            - *prepare_mysql
            - *await_mysql
            - run:
                name: Starrt PHP-FPM/Nginx
                command: |
                    cd  ~/workspace/php
                    php-fpm --daemonize
                    sudo ./.circleci/scripts/start-nginx.sh
            - run:
                name: APIv0 Tests
                command: |
                    cd ~/workspace/php
                    ./vendor/bin/phpunit -c phpunit.xml.dist --exclude-group=ignore --testsuite="APIv0"
            - run:
                name: Models Tests
                command: |
                    cd ~/workspace/php
                    ./vendor/bin/phpunit -c phpunit.xml.dist --exclude-group=ignore --testsuite="Models"
    php_73_lint:
        docker: *php73
        steps: *php_lint_steps
    php_73_tests:
        docker: *php73
        steps: *php_unit_test_steps
    php_73_integration:
        docker: *php73
        steps: *php_integration_test_steps
    php_71_lint:
        docker: *php71
        steps: *php_lint_steps
    php_71_tests:
        docker: *php71
        steps: *php_unit_test_steps
    php_71_integration:
        docker: *php71
        steps: *php_integration_test_steps
    dependency_audit:
        docker: *php72
        steps:
            - *is_frontend
            - vanilla/checkout
            - *post_checkout_frontend
            - run: yarn audit

workflows:
    version: 2
    commit:
        jobs:
            # PHP 7.2 jobs are only nightly until we move upwards on infra.
            - php_setup
            - php_72_lint
            - php_72_integration:
                requires:
                    - php_setup
            - php_72_tests:
                requires:
                    - php_setup
            # JS and browsers
            - frontend_setup
            - frontend_lint:
                requires:
                    - frontend_setup
            - frontend_typechecker:
                requires:
                    - frontend_setup
            - frontend_build:
                requires:
                    - frontend_setup
            - frontend_test:
                requires:
                    - frontend_setup
    nightly:
        triggers:
            - schedule:
                cron: "0 0 * * *" # Once a day.
                filters:
                    branches:
                        only:
                            - master
        jobs:
            - dependency_audit
            # PHP and serverside
            - php_setup
            - php_71_lint
            - php_72_lint
            - php_73_lint
            - php_71_integration:
                requires:
                    - php_setup
            - php_72_integration:
                requires:
                    - php_setup
            - php_73_integration:
                requires:
                    - php_setup
            - php_71_tests:
                requires:
                    - php_setup
            - php_72_tests:
                requires:
                    - php_setup
            - php_73_tests:
                requires:
                    - php_setup
            ## JS & browsers
            - frontend_setup
            - frontend_lint:
                requires:
                    - frontend_setup
            - frontend_typechecker:
                requires:
                    - frontend_setup
            - frontend_build:
                requires:
                    - frontend_setup
            - frontend_test:
                requires:
                    - frontend_setup
