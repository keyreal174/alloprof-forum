version: 2.1
orbs:
    vanilla:
        commands:
            checkout:
                steps:
                - run:
                    name: Prepare git
                    command: |
                        # Add githubs known SSH key.
                        # This can't be in an external script because of the $CHECKOUT_KEY env var works.
                        mkdir -p ~/.ssh

                        echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts

                        (umask 077; touch ~/.ssh/id_rsa)
                        chmod 0600 ~/.ssh/id_rsa
                        (cat \<<EOF > ~/.ssh/id_rsa
                        $CHECKOUT_KEY
                        EOF
                        )
                - run:
                    name: Clone Scripts
                    command: git clone https://github.com/vanilla/ci-scripts.git ~/workspace/ci-scripts
                - run:
                    name: Clone Repo
                    command: ~/workspace/ci-scripts/clone-repo.sh
                - run:
                    name: Merge Target Branch
                    command: ~/workspace/ci-scripts/merge-target-branch.sh
            prepare_mysql:
                steps:
                - run:
                    name: Prepare MySQL
                    command: ~/workspace/ci-scripts/prepare-mysql.sh
aliases:
    - &db_env
        MYSQL_USER: circleci
        MYSQL_PASSWORD: ''
        MYSQL_DATABASE: vanilla_test
        MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
    - &php71
        - image: circleci/php:7.1.30-fpm-stretch-node
        - image: mysql:5.7.26
          environment: *db_env
    - &php72
        - image: circleci/php:7.2.19-fpm-stretch-node
        - image: mysql:5.7.26
          environment: *db_env
    - &php73
        - image: circleci/php:7.3.6-fpm-stretch-node
        - image: mysql:5.7.26
          environment: *db_env
    - &install_nginx
        run:
            name: Installing NGINX
            command: sudo apt-get update && sudo apt-get install nginx
    - &node
        - image: circleci/node:lts-browsers
    - &run_yarn
        run:
            name: Install Yarn Packages
            command: |
                cd ~/workspace/repo
                yarn install --pure-lockfile
                yarn install-all
    - &set_hosts
        run:
            name: Configuring Hosts
            command: |
                # Localhost redirects
                echo 127.0.0.1 vanilla.test | sudo tee -a /etc/hosts
                cat /etc/hosts
    - &attach_workspace
        attach_workspace:
            at: ~/workspace
    - &run_composer
        run:
            name: Install Composer Packages
            command: |
                cd ~/workspace/repo
                VANILLA_BUILD_DISABLE_AUTO_BUILD=true composer install --optimize-autoloader
    - &run_php_lint
        run:
            name: Linting PHP
            command: |
                cd ~/workspace/repo
                # Validate syntax in all the files
                .circleci/scripts/php-lint.sh ./applications
                .circleci/scripts/php-lint.sh ./conf
                .circleci/scripts/php-lint.sh ./library
                .circleci/scripts/php-lint.sh ./plugins
                .circleci/scripts/php-lint.sh ./themes

                # Run code sniffer on the diffed files.
                ./.circleci/scripts/diff-standards.sh $CUSTOM_TARGET_BRANCH
jobs:
    frontend_setup:
        docker: *node
        steps:
            - run:
                name: Versions
                command: |
                    node --version
                    yarn --version
            - vanilla/checkout
            - run:
                # Makes workspace persisting much faster if not needed.
                name: Cleaning up git directory
                command: |
                    cd ~/workspace/repo
                    rm -rf .git
            # We explcitly don't cache dependencies.
            # The cache validation & fetching seems to take longer than fetching from source.
            - *run_yarn
            - persist_to_workspace:
                root: ~/workspace
                paths:
                    - frontend
    frontend_build:
        docker: *node
        steps:
            - *attach_workspace
            - run:
                name: Build Frontend
                command: |
                    cd ~/workspace/repo
                    yarn build
    frontend_test:
        docker: *node
        steps:
            - *attach_workspace
            - run:
                name: Build Frontend
                command: |
                    cd ~/workspace/repo
                    yarn test
    frontend_lint:
        docker: *node
        steps:
            - *attach_workspace
            - run: |
                cd ~/workspace/repo
                yarn lint
                yarn prettier --check "**/src/scripts/**/*"
    frontend_typechecker:
        docker: *node
        resource_class: large
        steps:
            - *attach_workspace
            - run: |
                cd ~/workspace/repo
                yarn check-types
    php_setup:
        docker: *php72
        steps:
            - run:
                name: Versions
                command: |
                    php --version
                    composer --version
            - vanilla/checkout
            # We explcitly don't cache dependencies.
            # The cache validation & fetching seems to take longer than fetching from source.
            - *run_composer
            - persist_to_workspace:
                root: ~/workspace
                paths:
                    - php
    php_72_lint:
        docker: *php72
        steps: &php_lint_steps
            - vanilla/checkout
            - *run_composer
            - *run_php_lint
    php_72_tests:
        docker: *php72
        steps: &php_unit_test_steps
            - *attach_workspace
            - *set_hosts
            - run:
                name: Test setup
                command: |
                    cd ~/workspace/repo
                    cp ./.circleci/scripts/templates/vanilla/conf/bootstrap.before.php ./conf/bootstrap.before.php
                    - vanilla/prepare_mysql
            - run:
                name: Library Tests
                command: |
                    cd ~/workspace/repo
                    ./vendor/bin/phpunit -c phpunit.xml.dist --exclude-group=ignore --testsuite="Library"
            - run:
                name: APIv2 Tests
                command: |
                    cd ~/workspace/repo
                    ./vendor/bin/phpunit -c phpunit.xml.dist --exclude-group=ignore --testsuite="APIv2"
    php_72_integration:
        docker: *php72
        steps: &php_integration_test_steps
            - *attach_workspace
            - *set_hosts
            - *install_nginx
            - vanilla/prepare_mysql
            - run:
                name: Starrt PHP-FPM/Nginx
                command: |
                    cd  ~/workspace/repo
                    php-fpm --daemonize
                    sudo ./.circleci/scripts/start-nginx.sh
            - run:
                name: APIv0 Tests
                command: |
                    cd ~/workspace/repo
                    ./vendor/bin/phpunit -c phpunit.xml.dist --exclude-group=ignore --testsuite="APIv0"
            - run:
                name: Models Tests
                command: |
                    cd ~/workspace/repo
                    ./vendor/bin/phpunit -c phpunit.xml.dist --exclude-group=ignore --testsuite="Models"
    php_73_lint:
        docker: *php73
        steps: *php_lint_steps
    php_73_tests:
        docker: *php73
        steps: *php_unit_test_steps
    php_73_integration:
        docker: *php73
        steps: *php_integration_test_steps
    php_71_lint:
        docker: *php71
        steps: *php_lint_steps
    php_71_tests:
        docker: *php71
        steps: *php_unit_test_steps
    php_71_integration:
        docker: *php71
        steps: *php_integration_test_steps
    dependency_audit:
        docker: *php72
        steps:
            - vanilla/checkout
            - run: yarn audit

workflows:
    version: 2
    commit:
        jobs:
            # PHP 7.2 jobs are only nightly until we move upwards on infra.
            - php_setup
            - php_72_lint
            - php_72_integration:
                requires:
                    - php_setup
            - php_72_tests:
                requires:
                    - php_setup
            # JS and browsers
            - frontend_setup
            - frontend_lint:
                requires:
                    - frontend_setup
            - frontend_typechecker:
                requires:
                    - frontend_setup
            - frontend_build:
                requires:
                    - frontend_setup
            - frontend_test:
                requires:
                    - frontend_setup
    nightly:
        triggers:
            - schedule:
                cron: "0 0 * * *" # Once a day.
                filters:
                    branches:
                        only:
                            - master
        jobs:
            - dependency_audit
            # PHP and serverside
            - php_setup
            - php_71_lint
            - php_72_lint
            - php_73_lint
            - php_71_integration:
                requires:
                    - php_setup
            - php_72_integration:
                requires:
                    - php_setup
            - php_73_integration:
                requires:
                    - php_setup
            - php_71_tests:
                requires:
                    - php_setup
            - php_72_tests:
                requires:
                    - php_setup
            - php_73_tests:
                requires:
                    - php_setup
            ## JS & browsers
            - frontend_setup
            - frontend_lint:
                requires:
                    - frontend_setup
            - frontend_typechecker:
                requires:
                    - frontend_setup
            - frontend_build:
                requires:
                    - frontend_setup
            - frontend_test:
                requires:
                    - frontend_setup
